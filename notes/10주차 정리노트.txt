예제 8-2
#include <iostream>
#include <string>
using namespace std;

class Point {
protected:
    int x, y; // 한 점 (x,y) 좌표값
public:
    void set(int x, int y);
    void showPoint();
};

void Point::set(int x, int y) {
    this->x = x;
    this->y = y;
}

void Point::showPoint() {
    cout << "(" << x << "," << y << ")" << endl;
}

class ColorPoint : public Point {
    string color;
public:
    void setColor(string color);
    void showColorPoint();
    bool equals(ColorPoint p);
};

void ColorPoint::setColor(string color) {
    this->color = color;
}

void ColorPoint::showColorPoint() {
    cout << color << ":";
    showPoint(); // Point 클래스의 showPoint() 호출
}

bool ColorPoint::equals(ColorPoint p) {
    if (x == p.x && y == p.y && color == p.color) // ①
        return true;
    else
        return false;
}

int main() {
    Point p; // 기본 클래스의 객체 생성
    p.set(2, 3); // ②
    p.x = 5;     // ③
    p.y = 5;     // ④
    p.showPoint();

    ColorPoint cp; // 파생 클래스의 객체 생성
    cp.x = 10;     // ⑤
    cp.y = 10;     // ⑥
    cp.set(3, 4);
    cp.setColor("Red");
    cp.showColorPoint();

    ColorPoint cp2;
    cp2.set(3, 4);
    cp2.setColor("Red");
    cout << ((cp.equals(cp2)) ? "true" : "false"); // ⑦
}

태호 : 클래스 내부의 변수는 기본적으로 private이기 때문에 3,4번은 오류가 나고 (오류)5,6번은 부모 클래스와 연결되지 않았기 때문에 오류가 났다고 생각합니다.

재연 : 3,4번은 클래스에서 protected로 선언되었습니다. protect 멤버는 해당 클래스와 그 서브 클래스 내에서만 접근이 가능하기 때문에 오류가 발생합니다. 5,6번은 main 함수에서 ColorPoitn 클래스의 객체에서 직접 접근할 때 Point에서 파생되었으므로 set 함수를 사용해야하기 때문에 오류가 발생합니다.


예제 8-4
#include <iostream>
using namespace std;

class Base {
    int a;

protected:
    void setA(int a) { this->a = a; }

public:
    void showA() { cout << a; }
};

class Derived : private Base {
    int b;

protected:
    void setB(int b) { this->b = b; }

public:
    void showB() { cout << b; }
};

int main() {
    Derived x;

    x.a = 5; // ①
    x.setA(10); // ②
    x.showA(); // ③

    x.b = 10; // ④
    x.setB(10); // ⑤
    x.showB(); // ⑥
}
태호 : 1,2번은 Base에서 private로 setA와 showB를 상속했기 때문에 오류가 나지 않았지만 3,4번은 setA와 showA가 이미 private로 보호받고 있어서 GrandDerived에 상속받지 못했기 때문에 오류가 났습니다.

예제 8-6
#include <iostream>
using namespace std;

class Base {
    int a;
protected:
    void setA(int a) { this->a = a; }
public:
    void showA() { cout << a; }
};

class Derived : private Base {
    int b;
protected:
    void setB(int b) { this->b = b; }
public:
    void showB() {
        setA(5); // ①
        showA(); // ②
        cout << b;
    }
};

class GrandDerived : private Derived {
    int c;
protected:
    void setAB(int x) {
        setA(x); // ③
        showA(); // ④
        setB(x); // ⑤
    }
};

Q. 다중 상속을 선언했을 때 장점과 주의할 점 

태호 -
#include<iostream>
using namespace std;

class  A{
public:
   int cnt = 0;
   A() { cnt++; }
   void count() { cout << cnt; }
};

class B: public A{};

class C: public A{};

class D : public B, public C {
public:
   void check2() { count(); };
};

int main() {
   D test;
   test.count();
}

A) 다중 상속을 선언하면 프로그램을 짤 때 같은 용도의 함수를 클래스가 다르단 이유로 여러 번 쓸 필요가 없다는 점에서 좋은 것 같은데 문제점은 없을까요?

B ) 만약 클래스 A,B,C,D가 있을 때 A가 B, C에게 상속해 주고 그 둘이 D에게 상속해 주는 경우 D는 한세대 걸쳐서 A로부터 상속받는데 B, C가 A를 공유한다면 문제가 없겠지만 그렇지 않다면 상속받은 B랑 C 중 누구로부터 A를 상속받았는지 모호하다는 문제가 생길 것 같아요.

A) 그럼 먼저 A를 공유하는지 확인하기 위해 A를 상속받는 B, C가 생성되면 A내부의 변수 cnt가 1씩 증가하도록 해 D에서 A의 cnt를 확인하도록 하면, A를 공유한다면 cnt가 2일 것이고 아니라면 cnt가 1일 테니 A를 공유하지 않는다는 걸 확인할 프로그램을 만들어보아요.

B)만들어서 실행해 본 결과 ""D::count"이(가) 모호합니다."라는 오류 목록은 뜨는 걸로 봐서 B와 C는 A를 공유하지 않고 D가 어떤 A로부터 상속받는지 모호하기 때문에 오류로 실행이 안되네요. 

재연 - 
다중 상속을 선언하게 되면 코드를 재사용하고 유연한 설계를 가능하게 한다. 이는 하나의 클래스에서 다양한 기능을 구현할 때 편하게 사용할 수 있다. 그러나 다중 상속을 오용하면 코드가 복잡해질 수 있어 적절한 설게를 하는 것이 중요하다.
