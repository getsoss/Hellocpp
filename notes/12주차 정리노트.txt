Q. 기존 배열로도 자료구조를 구현할 수 있는데, 왜 벡터 컨테이너를 사용할까?

태호 - 배열은 크기의 변경이 어렵지만, 벡터 컨테이너는 크기 변경이 편하고 요소의 추가나 삭제가 용이해 메모리 관리를 자동화하여 편의성과 안전성을 제공하기 때문이다.

재연 - 벡터는 간결하고 편리한 문법을 제공해 코드의 가독성을 높일 수 있다. 배열과 관련된 많은 세부 사항들을 처리하는 것이 더 간단하고 명료해지기 때문이다.

Q. 벡터는 데이터의 크기가 큰 요소를 추가하게 되었을 때 속도가 느려지는가?

태호 - 벡터는 크기를 늘릴 때 재할당과 복사가 필요하기 때문에 작은 규모의 작업시에는 차이가 미미하지만 큰 규모의 데이터나 작업이 필요한 경우 차이가 커질 수 있다. 그러나 컴퓨터의 성능과 메모리 관리 기술이 발전하면서 이 한계 또한 뛰어 넘을 수 있다.

재연 - 일반적으로 필요에 따라 더 큰 메모리 블록을 할당하고 이전 데이터와 함께 이동이 되면 성능은 저하될 수 밖에 없다. 그러나 벡터는 크기를 조절할 때마다 두 배로 메모리를 할당하여 더 자주 메모리르 재할당하지 않아도 돼 평균적으로 객체를 추가할 때의 성능 손실을 줄일 수 있다.
